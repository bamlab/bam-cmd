#!/usr/bin/env node

var options = require('commander');
var inquirer = require('inquirer');
var $q = require('bluebird');
var fs = require('fs');
require('colors');
var path = require('path');
var bamCmd = require('..');

var configFile = 'bam.js';

function parseOptions() {
  var repoName = null;
  var repoNameDefer = $q.defer();

  options
    .arguments('[repoName]')
    .action(function(name) {
      repoName = name;
    })
    .parse(process.argv);

  if (repoName !== null) {
    repoNameDefer.resolve(repoName);

  } else { // Ask for a repo
    inquirer.prompt({
      name: 'repoName',
      message: 'Which project do you want to install?'
    }, function (answer) {
      repoNameDefer.resolve(answer.repoName);
    });
  }
  return repoNameDefer.promise;
}

function checkDirEmpty(param) {
  return $q.promisify(fs.readdir)('.')
    .then(function(list) {
      if (list.length !== 0) {
        return $q.reject('Directory not empty');
      }
      return param;
    });
}

function clone(repoName) {
  var args  = [
    'clone',
    '--progress',
    '--recursive',
    'git@github.com:bamlab/' + repoName + '.git',
    repoName
  ] ;

  console.log(('Cloning the repository ' + repoName + ' ...').cyan);
  return bamCmd.run('git', args).then(function(){
    console.log(('done ' + repoName).cyan);
    return repoName;
  });
}

function readConfig(dirName) {
  var configPath = path.resolve(dirName, configFile);
  return [
    dirName,
    bamCmd.loadConfig(configPath)
  ];
}

function moveDir(dirName, config) {
  var finalDir = config.getDirName();

  if (! finalDir) {
    return;
  }

  fs.renameSync(dirName, finalDir);
  return config;
}

function fetchLinkedRepos(config) {
  var repos = config.getLinkedRepos();
  var promises = [];
  repos.forEach(function(name) {
    var promise = clone(name)
      .then(readConfig)
      .spread(moveDir)
      .then(runInstall)
      .catch(function (err) {
        console.error(('Error installing ' + name).red);
        console.error((err + '').red);
      });
    promises.push(promise);
  });
  return promises;
}

function runInstall(config) {
  return bamCmd.spawn('bam', ['run-install'], {
    cwd: config.getDirName(),
    stdio: 'inherit',
  });
}

parseOptions()
  .then(checkDirEmpty)
  .then(clone)
  .then(readConfig)
  .spread(moveDir)
  .then(function(config) {
    return $q.all(fetchLinkedRepos(config))
      .then(function() {
        return runInstall(config)
      });
  })

  .catch(function (err) {
    console.error((err + '').red);
    console.error('Abording.'.red);
    process.exit(1);
  })
;
