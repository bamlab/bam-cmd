#!/usr/bin/env node

var options = require('commander');
var inquirer = require('inquirer');
var $q = require('bluebird');
var fs = require('fs');
var colors = require('colors');
var childProcess = require('child_process');
var path = require('path');


var configFile = 'bam.js';


var exec = function (cmd) {
	var resDefer = $q.defer();
	childProcess.exec(cmd, function (err, stdin, stderr) {
		if (err === null) {
			resDefer.resolve(stdin);
		} else {
			resDefer.reject(stderr);
		}
	});
	return resDefer.promise;
}

function parseOptions() {
	var repoName = null;
	var repoNameDefer = $q.defer();

	options
		.arguments('[repoName]')
		.action(function(name) {
			repoName = name;
		})
		.parse(process.argv);

	if (repoName !== null) {
		repoNameDefer.resolve(repoName);

	} else { // Ask for a repo
		inquirer.prompt({
			name: 'repoName',
			message: 'Which project do you want to install?'
		}, function (answer) {
			repoNameDefer.resolve(answer.repoName);
		});
	}
	return repoNameDefer.promise;
}

function checkDirEmpty(param) {
	return $q.promisify(fs.readdir)('.')
		.then(function(list) {
			if (list.length !== 0) {
				return $q.reject('Directory not empty');
			}
			return param;
		});
}

function readConfig(dirName) {
	var configPath = path.resolve(dirName, configFile);

	return $q.promisify(fs.stat)(configPath)
		.then(function(stats) {
			if (! stats.isFile()) {
				return $q.reject('BAM configuration ' + configFile + ' not found');
			}
			return require(configPath);
		});
}

function clone(repoName) {
	var gitCmd  = 'git clone git@github.com:bamlab/' + repoName + '.git ' + repoName ; 

	console.log('Cloning the repository ...'.cyan);
	return exec(gitCmd).then(function(){
		console.log('done.'.cyan);
		return repoName;
	});
}


parseOptions()
//	.then(checkDirEmpty)
//	.then(clone)
	.then(readConfig)
	.catch(function (err) {
		console.error(err.red);
		console.error('Abording.'.red);
		process.exit(1);
	})
;
