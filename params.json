{"name":"Bam-cmd","tagline":"Build Automation Manager","body":"Build Automation Manager\r\n======================\r\n\r\n![Build status](https://img.shields.io/circleci/project/bamlab/bam-cmd/master.svg)\r\n![Release](https://img.shields.io/github/release/bamlab/bam-cmd.svg)\r\n![Climate](https://img.shields.io/codeclimate/github/bamlab/bam-cmd.svg)\r\n![Coverage](https://img.shields.io/codeclimate/coverage/github/bamlab/bam-cmd.svg)\r\n\r\nMake automatic build and install with a single command interface and plugins.\r\n\r\n## Installation\r\n\r\nTo install the bam command, just run in a terminal :\r\n```\r\nnpm install -g git@github.com:bamlab/bam-cmd.git\r\n```\r\n\r\nIf you want to fix the version to use in a particular project, just install it locally :\r\n```\r\nnpm install --save-dev git@github.com:bamlab/bam-cmd.git\r\n```\r\n\r\n## Quick Start\r\n\r\nBAM give you great tools to create an installation, a build and a deploy script for your project.\r\n\r\nTo start using it, just write in your main directory :\r\n```\r\nbam init\r\n```\r\n\r\nA new file `bam.js` will be created with some bootstrap code. This is where you will configure the command.\r\nIt should return a plain object with the configuration options for the command.\r\n\r\n### Build and Deploy\r\n\r\nThe BAM command have 2 subcommand for building and deploying. This is :\r\n```\r\nbam build [-e <env>]\r\nbam deploy [-e <env>]\r\n```\r\n\r\nWhen a developer use its in your project folder, the methods `build` and `deploy` of your option object will be called.\r\nThe method can accept as parameter an object with the command line options.\r\n\r\nIf you want to accept extra parameters from the command line, you can use the `buildOptions` methods. It accept a Commander object.\r\n\r\n\r\nExample :\r\n```\r\n$ cat bam.js\r\n\r\nmodule.exports = {\r\n  buildOptions: function(commander) {\r\n\tcommander.option('-d --doge', 'Doge');\r\n  },\r\n  build: function(options) {\r\n    console.log('In Build script');\r\n    console.log(options.env);\r\n\tconsole.log(options.doge);\r\n  },\r\n  deploy: function(options) {\r\n    console.log('In Deploy Script');\r\n  }\r\n};\r\n\r\n$ bam build\r\nRun Build\r\nIn Build script\r\nstaging\r\nundefined\r\n\r\n$ bam build -e prod -d\r\nRun Build\r\nIn Build script\r\nprod\r\ntrue\r\n\r\n$ bam deploy\r\nRun Deploy\r\nIn Deploy Script\r\n```\r\n\r\n### Installation script\r\n\r\nBAM provide a command to install a project from scratch. The only thing the user has to do is to place in an empty directory and to run:\r\n```\r\nbam install git@github.com:yourUser/yourRepo.git\r\n```\r\n\r\nThe command will do the following action :\r\n1. clone your repository with `git` in a new directory.\r\n2. Run `npm install` if your project contains a `package.json` file\r\n3. Look for a `bam.js` or a `bam.json` file and load it.\r\n4. Rename your project folder with the content of the `dirName` option\r\n5. Do the same actions with all the project given in the `linkedRepos` option\r\n6. Run your installation method\r\n\r\nThe step 2 allows you to require some locally installed script at the beginning of your `bam.js` file.\r\n\r\nIf you have more one repository for your entire project (like a back, a front and a provisioning) you can use the `linkedRepos` configuration. It is simply an array of repository names.\r\n\r\n## Reference\r\n\r\n### Commands\r\n\r\n```\r\nbam install [repoName]  Install a repository\r\nbam deploy [env]        Deploy project on servers or the store\r\nbam build               Build a project or an app\r\nbam init                Create an empty bam.js\r\nbam run-install         Run the install script of the project\r\nbam help [cmd]          display help for [cmd]\r\n```\r\n\r\nThe repository name could be specified in all accepted git format. The command accept the following format : \r\n* `orga/package.git` will be used as `git@github.com:orga/package.git` \r\n* `package.git` will be used as `git@github.com:bamlab/package.git`\r\n* `orga/package` will be used as `git@github.com:orga/package.git` \r\n* `package` will be used as `git@github.com:bamlab/package.git` \r\n\r\n### Project Configuration\r\n\r\nThe configuration must be in a file named `bam.js` in your project directory. It must export an object which could have the following attributes :\r\n\r\n**build**\r\n\r\ntype: `function(config)`\r\n\r\nparams:\r\n+ config : [Commander](https://github.com/tj/commander.js) object with the parsed command arguments\r\n\r\nThe script to run for building the project.\r\n\r\n**deploy**\r\n\r\ntype: `function(config)`\r\n\r\nparams:\r\n+ config : [Commander](https://github.com/tj/commander.js) object with the parsed command arguments\r\n\r\nThe script to run for deploying the project.\r\n\r\n**install**\r\n\r\ntype: `function()`\r\n\r\nThe script to run for installing the project. When the function is called, the `npm install` command has already been run if needed.\r\n\r\n\r\n**dirName**\r\n\r\ntype: `String`\r\n\r\nThe name of the project directory. If undefined or blank, the porject dir will not been renamed.\r\n\r\n**linkedRepos**\r\n\r\ntype: `Array` of `string`\r\n\r\nList of linked repository to install in the same parent folder of the project. Usefull when the back, the front and the provisionning are in different repositories. The names must have the same form than in the `bam install` command.\r\n\r\nAt the project installation, the will do the same actions than the `bam install` command on each project. The only two differences are :\r\n\r\n1. If no `bam.js` file is fould, no error is throwed.\r\n2. The linked repositories are not recursively installed\r\n\r\n\r\n## Running the test\r\n\r\nYou can run the tests with\r\n```\r\n   npm test\r\n```\r\n\r\nIf you want to generate the code coverage, use :\r\n```\r\n./node_modules/istanbul/lib/cli.js cover --dir ./coverage ./node_modules/mocha/bin/_mocha -- test\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}